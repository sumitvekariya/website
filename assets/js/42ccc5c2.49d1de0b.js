"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[8347],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=a.createContext({}),u=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(r),h=o,d=m["".concat(i,".").concat(h)]||m[h]||c[h]||n;return r?a.createElement(d,p(p({ref:t},l),{},{components:r})):a.createElement(d,p({ref:t},l))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,p=new Array(n);p[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,p[1]=s;for(var u=2;u<n;u++)p[u]=r[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return p}});var a=r(7294),o=r(6010),n="tabItem_Ymn6";function p(e){let{children:t,hidden:r,className:p}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(n,p),hidden:r},t)}},5488:function(e,t,r){r.d(t,{Z:function(){return h}});var a=r(3117),o=r(7294),n=r(6010),p=r(2389),s=r(7392),i=r(7094),u=r(2466),l="tabList__CuJ",m="tabItem_LNqP";function c(e){const{lazy:t,block:r,defaultValue:p,values:c,groupId:h,className:d}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??g.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),b=(0,s.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===p?p:p??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,i.U)(),[N,S]=(0,o.useState)(k),w=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==N&&f.some((t=>t.value===e))&&S(e)}const G=e=>{const t=e.currentTarget,r=w.indexOf(t),a=f[r].value;a!==N&&(E(t),S(a),null!=h&&y(h,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":G(e);break;case"ArrowRight":{const r=w.indexOf(e.currentTarget)+1;t=w[r]??w[0];break}case"ArrowLeft":{const r=w.indexOf(e.currentTarget)-1;t=w[r]??w[w.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,n.Z)("tabs-container",l)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":r},d)},f.map((e=>{let{value:t,label:r,attributes:p}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>w.push(e),onKeyDown:T,onClick:G},p,{className:(0,n.Z)("tabs__item",m,p?.className,{"tabs__item--active":N===t})}),r??t)}))),t?(0,o.cloneElement)(g.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function h(e){const t=(0,p.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},3563:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var a=r(3117),o=(r(7294),r(3905)),n=r(5488),p=r(5162);const s={sidebar_position:4,title:"Fetching data"},i="Semaphore data",u={unversionedId:"guides/fetching-data",id:"version-V3/guides/fetching-data",title:"Fetching data",description:"To fetch on-chain data from the Semaphore.sol contract, you can use the @semaphore-protocol/data library.",source:"@site/versioned_docs/version-V3/guides/fetching-data.mdx",sourceDirName:"guides",slug:"/guides/fetching-data",permalink:"/docs/guides/fetching-data",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/fetching-data.mdx",tags:[],version:"V3",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Fetching data"},sidebar:"version-V3/mySidebar",previous:{title:"Proofs",permalink:"/docs/guides/proofs"},next:{title:"Circuits",permalink:"/docs/technical-reference/circuits"}},l={},m=[{value:"Install library",id:"install-library",level:2},{value:"Fetch data using SemaphoreSubgraph",id:"fetch-data-using-semaphoresubgraph",level:2},{value:"Get group Ids",id:"get-group-ids",level:3},{value:"Get groups",id:"get-groups",level:3},{value:"Get group",id:"get-group",level:3},{value:"Check if an identity commitment is a member of a group",id:"check-if-an-identity-commitment-is-a-member-of-a-group",level:3},{value:"Fetch data using SemaphoreEthers",id:"fetch-data-using-semaphoreethers",level:2},{value:"Get group Ids",id:"get-group-ids-1",level:3},{value:"Get group",id:"get-group-1",level:3},{value:"Get group admin",id:"get-group-admin",level:3},{value:"Get group members",id:"get-group-members",level:3},{value:"Get group verified proofs",id:"get-group-verified-proofs",level:3}],c={toc:m};function h(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"semaphore-data"},"Semaphore data"),(0,o.kt)("p",null,"To fetch on-chain data from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/Semaphore.sol"},"Semaphore.sol")," contract, you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/data"},"@semaphore-protocol/data")," library. "),(0,o.kt)("p",null,"There are two ways to do this, using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/data/src/subgraph.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"SemaphoreSubgraph"))," or ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/data/src/ethers.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"SemaphoreEthers")),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"SemaphoreSubgraph")," class uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/subgraph"},"Semaphore subgraph"),", which uses ",(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/"},"The Graph Protocol")," under the hood, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"SemaphoreEthers")," class uses ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ethers-io/ethers.js/"},"Ethers"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#fetch-data-using-semaphoresubgraph"},(0,o.kt)("strong",{parentName:"a"},"Fetch data using SemaphoreSubgraph"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#fetch-data-using-semaphoreethers"},(0,o.kt)("strong",{parentName:"a"},"Fetch data using SemaphoreEthers")))),(0,o.kt)("h2",{id:"install-library"},"Install library"),(0,o.kt)(n.Z,{defaultValue:"npm",groupId:"package-managers",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(p.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @semaphore-protocol/data\n"))),(0,o.kt)(p.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @semaphore-protocol/data\n")))),(0,o.kt)("h2",{id:"fetch-data-using-semaphoresubgraph"},"Fetch data using SemaphoreSubgraph"),(0,o.kt)("p",null,"To fetch data using the Semaphore subgraph you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/data/src/subgraph.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"SemaphoreSubgraph"))," class from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/data"},"@semaphore-protocol/data")," package. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { SemaphoreSubgraph } from "@semaphore-protocol/data"\n\nconst semaphoreSubgraph = new SemaphoreSubgraph()\n\n// or:\nconst semaphoreSubgraph = new SemaphoreSubgraph("arbitrum")\n\n// or:\nconst semaphoreSubgraph = new SemaphoreSubgraph(\n    "https://api.studio.thegraph.com/query/14377/<your-subgraph>/<your-version>"\n)\n')),(0,o.kt)("h3",{id:"get-group-ids"},"Get group Ids"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupIds = await semaphoreSubgraph.getGroupIds()\n")),(0,o.kt)("h3",{id:"get-groups"},"Get groups"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const groups = await semaphoreSubgraph.getGroups()\n\n// or\n\nconst groups = await semaphoreSubgraph.getGroups({ members: true, verifiedProofs: true })\n")),(0,o.kt)("h3",{id:"get-group"},"Get group"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const group = await semaphoreSubgraph.getGroup("42")\n\n// or\n\nconst { members, verifiedProofs } = semaphoreSubgraph.getGroup("42", { members: true, verifiedProofs: true })\n')),(0,o.kt)("h3",{id:"check-if-an-identity-commitment-is-a-member-of-a-group"},"Check if an identity commitment is a member of a group"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'await semaphoreSubgraph.isGroupMember(\n    "42",\n    "16948514235341957898454876473214737047419402240398321289450170535251226167324"\n)\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can create an off-chain group using the SemaphoreSubgraph class to fetch members like so:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Group } from "@semaphore-protocol/group"\nimport { SemaphoreSubgraph } from "@semaphore-protocol/data"\n\nconst groupId = "3"\nconst semaphoreSubgraph = new SemaphoreSubgraph("sepolia")\nconst { members } = await semaphoreSubgraph.getGroup(groupId, { members: true })\nconst group = new Group(groupId, 20, members)\n'))),(0,o.kt)("h2",{id:"fetch-data-using-semaphoreethers"},"Fetch data using SemaphoreEthers"),(0,o.kt)("p",null,"To fetch data using Ethers you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/data/src/ethers.ts"},(0,o.kt)("inlineCode",{parentName:"a"},"SemaphoreEthers"))," class from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/data"},"@semaphore-protocol/data")," package. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { SemaphoreEthers } from "@semaphore-protocol/data"\n\nconst semaphoreEthers = new SemaphoreEthers()\n\n// or:\nconst semaphoreEthers = new SemaphoreEthers("homestead", {\n    address: "semaphore-address",\n    startBlock: 0\n})\n\n// or:\nconst semaphoreEthers = new SemaphoreEthers("http://localhost:8545", {\n    address: "semaphore-address"\n})\n')),(0,o.kt)("h3",{id:"get-group-ids-1"},"Get group Ids"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const groupIds = await semaphoreEthers.getGroupIds()\n")),(0,o.kt)("h3",{id:"get-group-1"},"Get group"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const group = await semaphoreEthers.getGroup("42")\n')),(0,o.kt)("h3",{id:"get-group-admin"},"Get group admin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const admin = await semaphoreEthers.getGroupAdmin("42")\n')),(0,o.kt)("h3",{id:"get-group-members"},"Get group members"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const members = await semaphoreEthers.getGroupMembers("42")\n')),(0,o.kt)("h3",{id:"get-group-verified-proofs"},"Get group verified proofs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const verifiedProofs = await semaphoreEthers.getGroupVerifiedProofs("42")\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can create an off-chain group using the SemaphoreEthers class to fetch members like so:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Group } from "@semaphore-protocol/group"\nimport { SemaphoreEthers } from "@semaphore-protocol/data"\n\nconst groupId = "3"\nconst semaphoreEthers = new SemaphoreEthers("sepolia")\nconst members = await semaphoreEthers.getGroupMembers(groupId)\nconst group = new Group(groupId, 20, members)\n'))))}h.isMDXComponent=!0}}]);