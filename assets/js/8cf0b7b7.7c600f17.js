"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[8657],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),r=n(6010),i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(3117),r=n(7294),i=n(6010),o=n(2389),s=n(7392),l=n(7094),u=n(2466),d="tabList__CuJ",p="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:o,values:c,groupId:m,className:h}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,s.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:b}=(0,l.U)(),[N,w]=(0,r.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=m){const e=v[m];null!=e&&e!==N&&f.some((t=>t.value===e))&&w(e)}const I=e=>{const t=e.currentTarget,n=T.indexOf(t),a=f[n].value;a!==N&&(O(t),w(a),null!=m&&b(m,String(a)))},S=e=>{let t=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},h)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:S,onClick:I},o,{className:(0,i.Z)("tabs__item",p,o?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,r.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,o.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},7807:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905)),i=n(5488),o=n(5162);const s={sidebar_position:1,title:"Identities"},l="Semaphore identities",u={unversionedId:"guides/identities",id:"version-V3/guides/identities",title:"Identities",description:"In order to join a Semaphore group, a user must first create a Semaphore identity.",source:"@site/versioned_docs/version-V3/guides/identities.mdx",sourceDirName:"guides",slug:"/guides/identities",permalink:"/docs/guides/identities",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/identities.mdx",tags:[],version:"V3",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Identities"},sidebar:"version-V3/mySidebar",previous:{title:"Quick setup",permalink:"/docs/quick-setup"},next:{title:"Groups",permalink:"/docs/guides/groups"}},d={},p=[{value:"Create identities",id:"create-identities",level:2},{value:"Install library:",id:"install-library",level:3},{value:"Create random identities",id:"create-random-identities",level:3},{value:"Create deterministic identities",id:"create-deterministic-identities",level:3},{value:"Save your identities",id:"save-your-identities",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"semaphore-identities"},"Semaphore identities"),(0,r.kt)("p",null,"In order to join a ",(0,r.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"Semaphore group"),", a user must first create a ",(0,r.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"Semaphore identity"),".\nA Semaphore identity contains two values generated with the identity:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Identity trapdoor"),(0,r.kt)("li",{parentName:"ul"},"identity nullifier")),(0,r.kt)("p",null,"To use and verify the identity, the identity owner (user) must know the trapdoor and nullifier values.\nTo prevent fraud, the owner should keep both values secret."),(0,r.kt)("h2",{id:"create-identities"},"Create identities"),(0,r.kt)("p",null,"In your code, use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/identity"},(0,r.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/identity"))," library to create a Semaphore identity ",(0,r.kt)("em",{parentName:"p"},"deterministically")," (from the hash of a message) or ",(0,r.kt)("em",{parentName:"p"},"randomly"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-random-identities"},(0,r.kt)("strong",{parentName:"a"},"Create random identities"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-deterministic-identities"},(0,r.kt)("strong",{parentName:"a"},"Create deterministic identities")))),(0,r.kt)("h3",{id:"install-library"},"Install library:"),(0,r.kt)(i.Z,{defaultValue:"npm",groupId:"package-managers",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @semaphore-protocol/identity\n"))),(0,r.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @semaphore-protocol/identity\n")))),(0,r.kt)("h3",{id:"create-random-identities"},"Create random identities"),(0,r.kt)("p",null,"To create a random identity, instantiate ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity")," without any parameters. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Identity } from "@semaphore-protocol/identity"\n\nconst { trapdoor, nullifier, commitment } = new Identity()\n')),(0,r.kt)("p",null,"The new identity contains two random secret values: ",(0,r.kt)("inlineCode",{parentName:"p"},"trapdoor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nullifier"),", and one public value: ",(0,r.kt)("inlineCode",{parentName:"p"},"commitment"),"."),(0,r.kt)("p",null,"The Poseidon hash of the identity nullifier and trapdoor is called the ",(0,r.kt)("em",{parentName:"p"},"identity secret"),",\nand its hash is the ",(0,r.kt)("em",{parentName:"p"},"identity commitment"),"."),(0,r.kt)("p",null,"An identity commitment, similarly to Ethereum addresses, is a public value used\nin Semaphore groups to represent the identity of a group member. The secret values are similar to\nEthereum private keys and are used to generate Semaphore zero-knowledge proofs and authenticate signals."),(0,r.kt)("h3",{id:"create-deterministic-identities"},"Create deterministic identities"),(0,r.kt)("p",null,"If you pass a message as a parameter, Semaphore generates ",(0,r.kt)("inlineCode",{parentName:"p"},"trapdoor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nullifier"),"\nfrom the ",(0,r.kt)("em",{parentName:"p"},"SHA256")," hash of the message.\nThe message might be a password or a message that the user cryptographically signs with a private key."),(0,r.kt)("p",null,"When using deterministic identities, you should always keep the message secret.\nGiven that the hash is deterministic, anyone with the same message can recreate the same identity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const identity = new Identity("secret-message")\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Building a system to save or recover secret values of Semaphore identities is nontrivial.\nYou may choose to delegate such functionality to existing wallets such as Metamask. For example:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"In Metamask, a user signs a message with the private key of their Ethereum account."),(0,r.kt)("li",{parentName:"ol"},"In your application, the user creates a deterministic identity with the signed message."),(0,r.kt)("li",{parentName:"ol"},"The user can now recreate their Semaphore identity whenever they want by signing the same message with their Ethereum account in Metamask."))),(0,r.kt)("h2",{id:"save-your-identities"},"Save your identities"),(0,r.kt)("p",null,"You can output an identity as a JSON string that you can save and reuse later.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity.toString()")," method generates a JSON array from an identity. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'console.log(identity.toString()) // View the identity trapdoor and nullifier.\n\n// \'["8255d...", "62c41..."]\'\n')),(0,r.kt)("p",null,"The array contains the trapdoor and nullifier."),(0,r.kt)("p",null,"To reuse the saved identity, pass the JSON to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity()")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const identity2 = new Identity(identity.toString())\n")))}m.isMDXComponent=!0}}]);