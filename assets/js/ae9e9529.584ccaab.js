"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[2881],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},f="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(r),m=o,h=f["".concat(p,".").concat(m)]||f[m]||c[m]||n;return r?a.createElement(h,i(i({ref:t},u),{},{components:r})):a.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[f]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<n;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return i}});var a=r(7294),o=r(6010),n="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(n,i),hidden:r},t)}},5488:function(e,t,r){r.d(t,{Z:function(){return m}});var a=r(3117),o=r(7294),n=r(6010),i=r(2389),l=r(7392),p=r(7094),s=r(2466),u="tabList__CuJ",f="tabItem_LNqP";function c(e){const{lazy:t,block:r,defaultValue:i,values:c,groupId:m,className:h}=e,d=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=c??d.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),g=(0,l.l)(k,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??d.find((e=>e.props.default))?.props.value??d[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,p.U)(),[b,w]=(0,o.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:P}=(0,s.o5)();if(null!=m){const e=v[m];null!=e&&e!==b&&k.some((t=>t.value===e))&&w(e)}const O=e=>{const t=e.currentTarget,r=C.indexOf(t),a=k[r].value;a!==b&&(P(t),w(a),null!=m&&N(m,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const r=C.indexOf(e.currentTarget)+1;t=C[r]??C[0];break}case"ArrowLeft":{const r=C.indexOf(e.currentTarget)-1;t=C[r]??C[C.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,n.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":r},h)},k.map((e=>{let{value:t,label:r,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>C.push(e),onKeyDown:T,onClick:O},i,{className:(0,n.Z)("tabs__item",f,i?.className,{"tabs__item--active":b===t})}),r??t)}))),t?(0,o.cloneElement)(d.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},d.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function m(e){const t=(0,i.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},1399:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return f}});var a=r(3117),o=(r(7294),r(3905)),n=r(5488),i=r(5162);const l={sidebar_position:3,title:"Proofs"},p="Semaphore proofs",s={unversionedId:"guides/proofs",id:"version-V3/guides/proofs",title:"Proofs",description:"Once a user joins their Semaphore identity to a Semaphore group, the user can signal anonymously with a zero-knowledge proof that proves the following:",source:"@site/versioned_docs/version-V3/guides/proofs.mdx",sourceDirName:"guides",slug:"/guides/proofs",permalink:"/docs/guides/proofs",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/proofs.mdx",tags:[],version:"V3",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Proofs"},sidebar:"version-V3/mySidebar",previous:{title:"Groups",permalink:"/docs/guides/groups"},next:{title:"Fetching data",permalink:"/docs/guides/fetching-data"}},u={},f=[{value:"Generate a proof off-chain",id:"generate-a-proof-off-chain",level:2},{value:"Install library:",id:"install-library",level:4},{value:"Verify a proof off-chain",id:"verify-a-proof-off-chain",level:2},{value:"Verify a proof on-chain",id:"verify-a-proof-on-chain",level:2}],c={toc:f};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"semaphore-proofs"},"Semaphore proofs"),(0,o.kt)("p",null,"Once a user joins their ",(0,o.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"Semaphore identity")," to a ",(0,o.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"Semaphore group"),", the user can signal anonymously with a zero-knowledge proof that proves the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the user is a member of the group,"),(0,o.kt)("li",{parentName:"ul"},"the same user created the signal and the proof.")),(0,o.kt)("p",null,"Developers can use Semaphore for the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#generate-a-proof-off-chain"},(0,o.kt)("strong",{parentName:"a"},"Generate a proof off-chain"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#verify-a-proof-off-chain"},(0,o.kt)("strong",{parentName:"a"},"Verify a proof off-chain"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#verify-a-proof-on-chain"},(0,o.kt)("strong",{parentName:"a"},"Verify a proof on-chain")))),(0,o.kt)("h2",{id:"generate-a-proof-off-chain"},"Generate a proof off-chain"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,o.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to generate an off-chain proof.\nTo generate a proof, pass the following parameters to the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateProof")," function:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"identity"),": the Semaphore identity of the user broadcasting the signal and generating the proof;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"group"),": the group to which the user belongs;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": the value that prevents double-signaling;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"signal"),": the signal the user wants to send anonymously;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"snarkArtifacts"),": the ",(0,o.kt)("inlineCode",{parentName:"li"},"zkey")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"wasm")," ",(0,o.kt)("a",{parentName:"li",href:"/docs/glossary/#trusted-setup-files"},"trusted setup files"),".")),(0,o.kt)("h4",{id:"install-library"},"Install library:"),(0,o.kt)(n.Z,{defaultValue:"npm",groupId:"package-managers",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @semaphore-protocol/proof\n"))),(0,o.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @semaphore-protocol/proof\n")))),(0,o.kt)("p",null,"In the voting system use case, once all the voters have joined their ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/identities#create-an-identity"},"identities")," to the ballot ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/groups"},"group"),",\na voter can generate a proof to vote for a proposal.\nIn the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"generateProof"),", the voting system passes the unique ballot ID (the ",(0,o.kt)("a",{parentName:"p",href:"/docs/glossary/#merkle-tree/"},"Merkle tree")," root of the group) as the\n",(0,o.kt)("inlineCode",{parentName:"p"},"externalNullifier")," to prevent the voter signaling more than once for the ballot.\nThe following code sample shows how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"generateProof")," to generate the voting proof:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { generateProof } from "@semaphore-protocol/proof"\n\nconst externalNullifier = group.root\nconst signal = 1\n\nconst fullProof = await generateProof(identity, group, externalNullifier, signal, {\n    zkeyFilePath: "./semaphore.zkey",\n    wasmFilePath: "./semaphore.wasm"\n})\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you are generating the proof on the client side, you can avoid adding the snark artifacts because they are fetched automatically:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const fullProof = await generateProof(identity, group, externalNullifier, signal)\n"))),(0,o.kt)("h2",{id:"verify-a-proof-off-chain"},"Verify a proof off-chain"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/proof"},(0,o.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to verify a Semaphore proof off-chain.\nTo verify a proof, pass the following to the ",(0,o.kt)("inlineCode",{parentName:"p"},"verifyProof")," function:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fullProof"),": the Semaphore proof;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"treeDepth"),": the Merkle tree depth.")),(0,o.kt)("p",null,"The following code sample shows how to verify the previously generated proof:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { verifyProof } from "@semaphore-protocol/proof"\n\nawait verifyProof(fullProof, 20) // true or false.\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"verifyProof")," returns a Promise that resolves to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h2",{id:"verify-a-proof-on-chain"},"Verify a proof on-chain"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/technical-reference/contracts#semaphoresol"},(0,o.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," contract to verify proofs on-chain."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"See our ",(0,o.kt)("a",{parentName:"p",href:"/docs/deployed-contracts"},"deployed contracts")," to find the addresses for your network.")),(0,o.kt)("p",null,"To verify Semaphore proofs in your contract, import ",(0,o.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol"),", pass it the ",(0,o.kt)("inlineCode",{parentName:"p"},"Semaphore.sol")," address and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"verifyProof")," method with following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"groupId"),": the identifier of the group;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"merkleTreeRoot"),": the root of the Merkle tree;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"signal"),": the signal the user wants to send anonymously;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nullifierHash"),": a ",(0,o.kt)("a",{parentName:"li",href:"#retrieve-a-nullifier-hash"},"nullifier hash"),";"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": the value that prevents double-signaling;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"proof"),": a ",(0,o.kt)("a",{parentName:"li",href:"#generate-a-solidity-compatible-proof"},"Solidity-compatible Semaphore proof"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can import ",(0,o.kt)("inlineCode",{parentName:"p"},"ISemaphore.sol")," and other Semaphore contracts from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/contracts"},(0,o.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts"))," NPM module.")))}m.isMDXComponent=!0}}]);