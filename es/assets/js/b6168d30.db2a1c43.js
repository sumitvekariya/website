"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[826],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=r.createContext({}),s=function(e){var a=r.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},u=function(e){var a=s(e.components);return r.createElement(d.Provider,{value:a},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=n,f=p["".concat(d,".").concat(m)]||p[m]||c[m]||i;return t?r.createElement(f,o(o({ref:a},u),{},{components:t})):r.createElement(f,o({ref:a},u))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:function(e,a,t){t.d(a,{Z:function(){return o}});var r=t(7294),n=t(6010),i="tabItem_Ymn6";function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(i,o),hidden:t},a)}},5488:function(e,a,t){t.d(a,{Z:function(){return m}});var r=t(3117),n=t(7294),i=t(6010),o=t(2389),l=t(7392),d=t(7094),s=t(2466),u="tabList__CuJ",p="tabItem_LNqP";function c(e){const{lazy:a,block:t,defaultValue:o,values:c,groupId:m,className:f}=e,h=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??h.map((e=>{let{props:{value:a,label:t,attributes:r}}=e;return{value:a,label:t,attributes:r}})),v=(0,l.l)(b,((e,a)=>e.value===a.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:g}=(0,d.U)(),[N,E]=(0,n.useState)(k),w=[],{blockElementScrollPositionUntilNextRender:O}=(0,s.o5)();if(null!=m){const e=y[m];null!=e&&e!==N&&b.some((a=>a.value===e))&&E(e)}const j=e=>{const a=e.currentTarget,t=w.indexOf(a),r=b[t].value;r!==N&&(O(a),E(r),null!=m&&g(m,String(r)))},C=e=>{let a=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;a=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;a=w[t]??w[w.length-1];break}}a?.focus()};return n.createElement("div",{className:(0,i.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},f)},b.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===a?0:-1,"aria-selected":N===a,key:a,ref:e=>w.push(e),onKeyDown:C,onClick:j},o,{className:(0,i.Z)("tabs__item",p,o?.className,{"tabs__item--active":N===a})}),t??a)}))),a?(0,n.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==N})))))}function m(e){const a=(0,o.Z)();return n.createElement(c,(0,r.Z)({key:String(a)},e))}},1652:function(e,a,t){t.r(a),t.d(a,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=t(3117),n=(t(7294),t(3905)),i=t(5488),o=t(5162);const l={sidebar_position:1,title:"Identidades"},d="Identidades Semaphore",s={unversionedId:"guides/identities",id:"version-V3/guides/identities",title:"Identidades",description:"Para unirse a un grupo Semaphore, un usuario primero deber\xe1 crear una identidad Semaphore.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-V3/guides/identities.mdx",sourceDirName:"guides",slug:"/guides/identities",permalink:"/es/docs/guides/identities",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/guides/identities.mdx",tags:[],version:"V3",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Identidades"},sidebar:"version-V3/mySidebar",previous:{title:"Configuraci\xf3n r\xe1pida",permalink:"/es/docs/quick-setup"},next:{title:"Grupos",permalink:"/es/docs/guides/groups"}},u={},p=[{value:"Crear identidades",id:"crear-identidades",level:2},{value:"Instalar librer\xeda:",id:"instalar-librer\xeda",level:3},{value:"Crear identidades aleatorias",id:"crear-identidades-aleatorias",level:3},{value:"Crear identidades determin\xedsticas",id:"crear-identidades-determin\xedsticas",level:3},{value:"Guarde sus identidades",id:"guarde-sus-identidades",level:2}],c={toc:p};function m(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"identidades-semaphore"},"Identidades Semaphore"),(0,n.kt)("p",null,"Para unirse a un ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"grupo Semaphore"),", un usuario primero deber\xe1 crear una ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"identidad Semaphore"),".\nUna identidad Semaphore contiene dos valores generados junto con la identidad:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Identity trapdoor (Identidad trampilla)"),(0,n.kt)("li",{parentName:"ul"},"Identity nullifier (Anulador de identidad)")),(0,n.kt)("p",null,"Para utilizar y verificar su identidad, la persona due\xf1a de la identidad (usuario) debe conocer los valores trapdoor y nullifier.\nPara prevenir fraudes, la persona due\xf1a debe conservar de forma secreta ambos valores."),(0,n.kt)("h2",{id:"crear-identidades"},"Crear identidades"),(0,n.kt)("p",null,"En su c\xf3digo, utilice la librer\xeda ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/identity"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/identity"))," para crear una identidad Semaphore ",(0,n.kt)("em",{parentName:"p"},"de forma determin\xedstica")," (del hash de un mensaje) o ",(0,n.kt)("em",{parentName:"p"},"de forma aleatoria"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-random-identities"},(0,n.kt)("strong",{parentName:"a"},"Crear identidades aleatorias"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-deterministic-identities"},(0,n.kt)("strong",{parentName:"a"},"Crear identidades determin\xedsticas")))),(0,n.kt)("h3",{id:"instalar-librer\xeda"},"Instalar librer\xeda:"),(0,n.kt)(i.Z,{defaultValue:"npm",groupId:"package-managers",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @semaphore-protocol/identity\n"))),(0,n.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @semaphore-protocol/identity\n")))),(0,n.kt)("h3",{id:"crear-identidades-aleatorias"},"Crear identidades aleatorias"),(0,n.kt)("p",null,"Para crear una identidad aleatoria, represente ",(0,n.kt)("inlineCode",{parentName:"p"},"Identity")," sin alg\xfan par\xe1metro. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { Identity } from "@semaphore-protocol/identity"\n\nconst { trapdoor, nullifier, commitment } = new Identity()\n')),(0,n.kt)("p",null,"La nueva identidad contiene dos valores aleatorios secretos: ",(0,n.kt)("inlineCode",{parentName:"p"},"trapdoor")," y ",(0,n.kt)("inlineCode",{parentName:"p"},"nullifier"),", y un valor p\xfablico: ",(0,n.kt)("inlineCode",{parentName:"p"},"commitment"),"."),(0,n.kt)("p",null,"El hash Poseidon del identity nullifier y trapdoor se conoce como ",(0,n.kt)("em",{parentName:"p"},"identity secret")," (el secreto de identidad),\ny su hash es el ",(0,n.kt)("em",{parentName:"p"},"identity commitment")," (compromiso de identidad)."),(0,n.kt)("p",null,"Un identity commitment (compromiso de identidad), de forma similar a las direcciones Ethereum, es un valor p\xfablico que se utiliza en los grupos Semaphore para representar la\nidentidad de un miembro del grupo. Los valores secretos son similares a las llaves privadas\nEthereum y se utilizan para generar pruebas de conocimiento cero (ZKP) Semaphore y autenticar se\xf1ales."),(0,n.kt)("h3",{id:"crear-identidades-determin\xedsticas"},"Crear identidades determin\xedsticas"),(0,n.kt)("p",null,"Si transmite un mensaje como un par\xe1metro, Semaphore genera ",(0,n.kt)("inlineCode",{parentName:"p"},"trapdoor")," y ",(0,n.kt)("inlineCode",{parentName:"p"},"nullifier"),"\ndel hash ",(0,n.kt)("em",{parentName:"p"},"SHA256")," del mensaje.\nEl mensaje puede ser una contrase\xf1a o un mensaje que el usuario firma de forma criptogr\xe1fica con una llave privada."),(0,n.kt)("p",null,"Al utilizar identidades determin\xedsticas siempre deber\xe1 mantener secreto el mensaje.\nDado que el hash es determin\xedstico, cualquier persona con el mismo mensaje puede recrear la misma identidad."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'const identity = new Identity("secret-message")\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Crear un sistema que guarde o recupere valores secretos de identidades Semaphore no es trivial.\nPuede elegir delegar este tipo de funcionalidad a carteras existente como Metamask. Por ejemplo:"),(0,n.kt)("ol",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ol"},"En Metamask, un usuario firma un mensaje con la llave privada de su cuenta Ethereum."),(0,n.kt)("li",{parentName:"ol"},"En la aplicaci\xf3n que usted ofrece, el usuario crea una identidad determin\xedstica con el mensaje firmado."),(0,n.kt)("li",{parentName:"ol"},"Ahora el usuario puede recrear su identidad Semaphore cuando quiera al firmar el mismo mensaje con su cuenta Ethereum en Metamask."))),(0,n.kt)("h2",{id:"guarde-sus-identidades"},"Guarde sus identidades"),(0,n.kt)("p",null,"Puede generar una identidad como una cadena de caract\xe9res JSON que puede guardar y reutilizar m\xe1s tarde.\nEl m\xe9todo ",(0,n.kt)("inlineCode",{parentName:"p"},"Identity.toString()")," genera una matriz JSON a partir de una identidad. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'console.log(identity.toString()) // Ver la identidad trampilla y anulador.\n\n// \'["8255d...", "62c41..."]\'\n')),(0,n.kt)("p",null,"La matriz contiene la trapdoor y el nullifier."),(0,n.kt)("p",null,"Para reutilizar la identidad guardada, transforme la cadena JSON al constructor ",(0,n.kt)("inlineCode",{parentName:"p"},"Identity()"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const identity2 = new Identity(identity.toString())\n")))}m.isMDXComponent=!0}}]);